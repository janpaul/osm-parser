// source: src/proto/fileformat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.OSMPBF.Blob', null, global);
goog.exportSymbol('proto.OSMPBF.Blob.DataCase', null, global);
goog.exportSymbol('proto.OSMPBF.BlobHeader', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OSMPBF.Blob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.OSMPBF.Blob.oneofGroups_);
};
goog.inherits(proto.OSMPBF.Blob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OSMPBF.Blob.displayName = 'proto.OSMPBF.Blob';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OSMPBF.BlobHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OSMPBF.BlobHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OSMPBF.BlobHeader.displayName = 'proto.OSMPBF.BlobHeader';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.OSMPBF.Blob.oneofGroups_ = [[1,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.OSMPBF.Blob.DataCase = {
  DATA_NOT_SET: 0,
  RAW: 1,
  ZLIB_DATA: 3,
  LZMA_DATA: 4,
  OBSOLETE_BZIP2_DATA: 5,
  LZ4_DATA: 6,
  ZSTD_DATA: 7
};

/**
 * @return {proto.OSMPBF.Blob.DataCase}
 */
proto.OSMPBF.Blob.prototype.getDataCase = function() {
  return /** @type {proto.OSMPBF.Blob.DataCase} */(jspb.Message.computeOneofCase(this, proto.OSMPBF.Blob.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OSMPBF.Blob.prototype.toObject = function(opt_includeInstance) {
  return proto.OSMPBF.Blob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OSMPBF.Blob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OSMPBF.Blob.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawSize: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    raw: msg.getRaw_asB64(),
    zlibData: msg.getZlibData_asB64(),
    lzmaData: msg.getLzmaData_asB64(),
    obsoleteBzip2Data: msg.getObsoleteBzip2Data_asB64(),
    lz4Data: msg.getLz4Data_asB64(),
    zstdData: msg.getZstdData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OSMPBF.Blob}
 */
proto.OSMPBF.Blob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OSMPBF.Blob;
  return proto.OSMPBF.Blob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OSMPBF.Blob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OSMPBF.Blob}
 */
proto.OSMPBF.Blob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRawSize(value);
      break;
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRaw(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setZlibData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLzmaData(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setObsoleteBzip2Data(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLz4Data(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setZstdData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OSMPBF.Blob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OSMPBF.Blob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OSMPBF.Blob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OSMPBF.Blob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional int32 raw_size = 2;
 * @return {number}
 */
proto.OSMPBF.Blob.prototype.getRawSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.setRawSize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.clearRawSize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.Blob.prototype.hasRawSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes raw = 1;
 * @return {!(string|Uint8Array)}
 */
proto.OSMPBF.Blob.prototype.getRaw = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw = 1;
 * This is a type-conversion wrapper around `getRaw()`
 * @return {string}
 */
proto.OSMPBF.Blob.prototype.getRaw_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRaw()));
};


/**
 * optional bytes raw = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRaw()`
 * @return {!Uint8Array}
 */
proto.OSMPBF.Blob.prototype.getRaw_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRaw()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.setRaw = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.OSMPBF.Blob.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.clearRaw = function() {
  return jspb.Message.setOneofField(this, 1, proto.OSMPBF.Blob.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.Blob.prototype.hasRaw = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes zlib_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.OSMPBF.Blob.prototype.getZlibData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes zlib_data = 3;
 * This is a type-conversion wrapper around `getZlibData()`
 * @return {string}
 */
proto.OSMPBF.Blob.prototype.getZlibData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getZlibData()));
};


/**
 * optional bytes zlib_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getZlibData()`
 * @return {!Uint8Array}
 */
proto.OSMPBF.Blob.prototype.getZlibData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getZlibData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.setZlibData = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.OSMPBF.Blob.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.clearZlibData = function() {
  return jspb.Message.setOneofField(this, 3, proto.OSMPBF.Blob.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.Blob.prototype.hasZlibData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes lzma_data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.OSMPBF.Blob.prototype.getLzmaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes lzma_data = 4;
 * This is a type-conversion wrapper around `getLzmaData()`
 * @return {string}
 */
proto.OSMPBF.Blob.prototype.getLzmaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLzmaData()));
};


/**
 * optional bytes lzma_data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLzmaData()`
 * @return {!Uint8Array}
 */
proto.OSMPBF.Blob.prototype.getLzmaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLzmaData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.setLzmaData = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.OSMPBF.Blob.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.clearLzmaData = function() {
  return jspb.Message.setOneofField(this, 4, proto.OSMPBF.Blob.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.Blob.prototype.hasLzmaData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes OBSOLETE_bzip2_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.OSMPBF.Blob.prototype.getObsoleteBzip2Data = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes OBSOLETE_bzip2_data = 5;
 * This is a type-conversion wrapper around `getObsoleteBzip2Data()`
 * @return {string}
 */
proto.OSMPBF.Blob.prototype.getObsoleteBzip2Data_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getObsoleteBzip2Data()));
};


/**
 * optional bytes OBSOLETE_bzip2_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObsoleteBzip2Data()`
 * @return {!Uint8Array}
 */
proto.OSMPBF.Blob.prototype.getObsoleteBzip2Data_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getObsoleteBzip2Data()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.setObsoleteBzip2Data = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.OSMPBF.Blob.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.clearObsoleteBzip2Data = function() {
  return jspb.Message.setOneofField(this, 5, proto.OSMPBF.Blob.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.Blob.prototype.hasObsoleteBzip2Data = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes lz4_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.OSMPBF.Blob.prototype.getLz4Data = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes lz4_data = 6;
 * This is a type-conversion wrapper around `getLz4Data()`
 * @return {string}
 */
proto.OSMPBF.Blob.prototype.getLz4Data_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLz4Data()));
};


/**
 * optional bytes lz4_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLz4Data()`
 * @return {!Uint8Array}
 */
proto.OSMPBF.Blob.prototype.getLz4Data_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLz4Data()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.setLz4Data = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.OSMPBF.Blob.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.clearLz4Data = function() {
  return jspb.Message.setOneofField(this, 6, proto.OSMPBF.Blob.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.Blob.prototype.hasLz4Data = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes zstd_data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.OSMPBF.Blob.prototype.getZstdData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes zstd_data = 7;
 * This is a type-conversion wrapper around `getZstdData()`
 * @return {string}
 */
proto.OSMPBF.Blob.prototype.getZstdData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getZstdData()));
};


/**
 * optional bytes zstd_data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getZstdData()`
 * @return {!Uint8Array}
 */
proto.OSMPBF.Blob.prototype.getZstdData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getZstdData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.setZstdData = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.OSMPBF.Blob.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.Blob} returns this
 */
proto.OSMPBF.Blob.prototype.clearZstdData = function() {
  return jspb.Message.setOneofField(this, 7, proto.OSMPBF.Blob.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.Blob.prototype.hasZstdData = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OSMPBF.BlobHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.OSMPBF.BlobHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OSMPBF.BlobHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OSMPBF.BlobHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    indexdata: msg.getIndexdata_asB64(),
    datasize: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OSMPBF.BlobHeader}
 */
proto.OSMPBF.BlobHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OSMPBF.BlobHeader;
  return proto.OSMPBF.BlobHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OSMPBF.BlobHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OSMPBF.BlobHeader}
 */
proto.OSMPBF.BlobHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIndexdata(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatasize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OSMPBF.BlobHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OSMPBF.BlobHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OSMPBF.BlobHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OSMPBF.BlobHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required string type = 1;
 * @return {string}
 */
proto.OSMPBF.BlobHeader.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OSMPBF.BlobHeader} returns this
 */
proto.OSMPBF.BlobHeader.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.BlobHeader} returns this
 */
proto.OSMPBF.BlobHeader.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.BlobHeader.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes indexdata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.OSMPBF.BlobHeader.prototype.getIndexdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes indexdata = 2;
 * This is a type-conversion wrapper around `getIndexdata()`
 * @return {string}
 */
proto.OSMPBF.BlobHeader.prototype.getIndexdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIndexdata()));
};


/**
 * optional bytes indexdata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIndexdata()`
 * @return {!Uint8Array}
 */
proto.OSMPBF.BlobHeader.prototype.getIndexdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIndexdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OSMPBF.BlobHeader} returns this
 */
proto.OSMPBF.BlobHeader.prototype.setIndexdata = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.BlobHeader} returns this
 */
proto.OSMPBF.BlobHeader.prototype.clearIndexdata = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.BlobHeader.prototype.hasIndexdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 datasize = 3;
 * @return {number}
 */
proto.OSMPBF.BlobHeader.prototype.getDatasize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.OSMPBF.BlobHeader} returns this
 */
proto.OSMPBF.BlobHeader.prototype.setDatasize = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OSMPBF.BlobHeader} returns this
 */
proto.OSMPBF.BlobHeader.prototype.clearDatasize = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OSMPBF.BlobHeader.prototype.hasDatasize = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.OSMPBF);
